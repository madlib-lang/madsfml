import type { Color } from "./Color"
import type { Window } from "./Window"
import { colorToShort } from "./Color"

type Circle = __Circle__
export type Circle



make :: Float -> Circle
export make = extern "madsfml__circle__make"

setCircleFillColorFFI :: Short -> Circle -> Circle
setCircleFillColorFFI = extern "madsfml__circle__setFillColor"

setFillColor :: Color -> Circle -> Circle
export setFillColor = (c, circle) => pipe(
  colorToShort,
  setCircleFillColorFFI($, circle)
)(c)

setPosition :: Float -> Float -> Circle -> Circle
export setPosition = extern "madsfml__circle__setPosition"

setRotation :: Float -> Circle -> Circle
export setRotation = extern "madsfml__circle__setRotation"

setScale :: Float -> Float -> Circle -> Circle
export setScale = extern "madsfml__circle__setScale"

setPointCount :: Short -> Circle -> Circle
export setPointCount = extern "madsfml__circle__setPointCount"

setRadius :: Short -> Circle -> Circle
export setRadius = extern "madsfml__circle__setRadius"

draw :: Circle -> Window -> {}
export draw = extern "madsfml__circle__draw"
