import type { Color } from "./Color"
import type { Font } from "./Font"
import type { Rect, Vector2 } from "./Math"
import type { RenderStates } from "./RenderStates"
import type { Transform } from "./Transform"
import type { Window } from "./Window"

import Math from "Math"
import Set from "Set"

import { colorToShort } from "./Color"



type Text = __Text__
export type Text

export type Style = Regular | Bold | Italic | Underlined | StrikeThrough

derive Comparable Style

styleToShort :: Style -> Short
styleToShort = where {
  Regular =>
    0

  Bold =>
    1

  Italic =>
    2

  Underlined =>
    4

  StrikeThrough =>
    8
}

sumStyles :: List Style -> Short
sumStyles = (styles) => pipe(
  Set.fromList,
  map(styleToShort),
  Set.reduce(Math.add, 0),
)(styles)

// --------- Text ------------------------------------

make :: {} -> Text
export make = extern "madsfml__text__make"

setFont :: Font -> Text -> Text
export setFont = extern "madsfml__text__setFont"

setString :: String -> Text -> Text
export setString = extern "madsfml__text__setString"

setFillColorFFI :: Short -> Text -> Text
setFillColorFFI = extern "madsfml__text__setFillColor"

setFillColor :: Color -> Text -> Text
export setFillColor = (c, t) => pipe(
  colorToShort,
  setFillColorFFI($, t),
)(c)

setOutlineColorFFI :: Short -> Text -> Text
setOutlineColorFFI = extern "madsfml__text__setOutlineColor"

setOutlineColor :: Color -> Text -> Text
export setOutlineColor = (c, t) => pipe(
  colorToShort,
  setOutlineColorFFI($, t),
)(c)

setOutlineThickness :: Float -> Text -> Text
export setOutlineThickness = extern "madsfml__text__setOutlineThickness"

setCharacterSize :: Short -> Text -> Text
export setCharacterSize = extern "madsfml__text__setCharacterSize"

setLetterSpacing :: Float -> Text -> Text
export setLetterSpacing = extern "madsfml__text__setLetterSpacing"

setLineSpacing :: Float -> Text -> Text
export setLineSpacing = extern "madsfml__text__setLineSpacing"

setStylesFFI :: Short -> Text -> Text
setStylesFFI = extern "madsfml__text__setStyles"

setStyles :: List Style -> Text -> Text
export setStyles = (styles, text) => pipe(
  sumStyles,
  setStylesFFI($, text),
)(styles)

getLocalBounds :: Text -> Rect Float
export getLocalBounds = extern "madsfml__text__getLocalBounds"

getGlocalBounds :: Text -> Rect Float
export getGlocalBounds = extern "madsfml__text__getGlocalBounds"



// --------- Transform ------------------------------------

getOrigin :: Text -> Vector2 Float
export getOrigin = extern "madsfml__text__getOrigin"

setOrigin :: Float -> Float -> Text -> Text
export setOrigin = extern "madsfml__text__setOrigin"

getPosition :: Text -> Vector2 Float
export getPosition = extern "madsfml__text__getPosition"

setPosition :: Float -> Float -> Text -> Text
export setPosition = extern "madsfml__text__setPosition"

getRotation :: Text -> Float
export getRotation = extern "madsfml__text__getRotation"

setRotation :: Float -> Text -> Text
export setRotation = extern "madsfml__text__setRotation"

getScale :: Text -> Vector2 Float
export getScale = extern "madsfml__text__getScale"

setScale :: Float -> Float -> Text -> Text
export setScale = extern "madsfml__text__setScale"

getTransform :: Text -> Transform
export getTransform = extern "madsfml__text__getTransform"



// --------- Drawable -------------------------------------

draw :: Text -> Window -> {}
export draw = extern "madsfml__text__draw"

drawWithRenderStates :: Text -> RenderStates -> Window -> {}
export drawWithRenderStates = extern "madsfml__circle__drawWithRenderStates"
