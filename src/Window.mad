import type { Color } from "./Color"
import type { View } from "./View"
import type { Vector2 } from "./Math"

import { colorToShort } from "./Color"



type Window = __Window__
export type Window


create :: Short -> Short -> String -> Window
export create = extern "madsfml__window__create"


createWithSettings :: Short -> Short -> String -> Short -> Window
export createWithSettings = extern "madsfml__window__createWithSettings"


close :: Window -> {}
export close = extern "madsfml__window__close"


display :: Window -> {}
export display = extern "madsfml__window__display"


clearWindowFFI :: Short -> Window -> {}
clearWindowFFI = extern "madsfml__window__clear"

clear :: Color -> Window -> {}
export clear = (color, window) => pipe(
  colorToShort,
  clearWindowFFI($, window),
)(color)


getView :: Window -> View
export getView = extern "madsfml__window__getView"


setView :: View -> Window -> Window
export setView = extern "madsfml__window__setView"


getDefaultView :: Window -> View
export getDefaultView = extern "madsfml__window__getDefaultView"


setFrameRateLimit :: Short -> Window -> Window
export setFrameRateLimit = extern "madsfml__window__setFrameRateLimit"


mapPixelToCoords :: Short -> Short -> View -> Window -> Vector2 Float
export mapPixelToCoords = extern "madsfml__window__mapPixelToCoords"


mapCoordsToPixel :: Float -> Float -> View -> Window -> Vector2 Short
export mapCoordsToPixel = extern "madsfml__window__mapCoordsToPixel"
